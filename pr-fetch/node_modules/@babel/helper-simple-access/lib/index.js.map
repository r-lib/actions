{"version":3,"names":["LOGICAL_OPERATORS","assignmentExpression","binaryExpression","cloneNode","identifier","logicalExpression","numericLiteral","sequenceExpression","unaryExpression","simplifyAccess","path","bindingNames","includeUpdateExpression","traverse","simpleAssignmentVisitor","scope","seen","WeakSet","UpdateExpression","exit","arg","get","isIdentifier","localName","node","name","has","getBinding","parentPath","isExpressionStatement","isCompletionRecord","operator","replaceWith","prefix","old","generateUidIdentifierBasedOnNode","varName","push","id","binary","AssignmentExpression","add","left","slice","includes","right"],"sources":["../src/index.ts"],"sourcesContent":["import {\n  LOGICAL_OPERATORS,\n  assignmentExpression,\n  binaryExpression,\n  cloneNode,\n  identifier,\n  logicalExpression,\n  numericLiteral,\n  sequenceExpression,\n  unaryExpression,\n} from \"@babel/types\";\nimport type * as t from \"@babel/types\";\nimport type { NodePath, Scope, Visitor } from \"@babel/traverse\";\n\ntype State = {\n  scope: Scope;\n  bindingNames: Set<string>;\n  seen: WeakSet<t.Node>;\n  includeUpdateExpression: boolean;\n};\nexport default function simplifyAccess(\n  path: NodePath,\n  bindingNames: Set<string>,\n  // TODO(Babel 8): Remove this\n  includeUpdateExpression: boolean = true,\n) {\n  path.traverse(simpleAssignmentVisitor, {\n    scope: path.scope,\n    bindingNames,\n    seen: new WeakSet(),\n    includeUpdateExpression,\n  });\n}\n\nconst simpleAssignmentVisitor: Visitor<State> = {\n  // TODO(Babel 8): Remove UpdateExpression\n  UpdateExpression: {\n    exit(path) {\n      const { scope, bindingNames, includeUpdateExpression } = this;\n      if (!includeUpdateExpression) {\n        return;\n      }\n\n      const arg = path.get(\"argument\");\n      if (!arg.isIdentifier()) return;\n      const localName = arg.node.name;\n\n      if (!bindingNames.has(localName)) return;\n\n      // redeclared in this scope\n      if (scope.getBinding(localName) !== path.scope.getBinding(localName)) {\n        return;\n      }\n\n      if (\n        path.parentPath.isExpressionStatement() &&\n        !path.isCompletionRecord()\n      ) {\n        // ++i => (i += 1);\n        const operator = path.node.operator == \"++\" ? \"+=\" : \"-=\";\n        path.replaceWith(\n          assignmentExpression(operator, arg.node, numericLiteral(1)),\n        );\n      } else if (path.node.prefix) {\n        // ++i => (i = (+i) + 1);\n        path.replaceWith(\n          assignmentExpression(\n            \"=\",\n            identifier(localName),\n            binaryExpression(\n              path.node.operator[0] as \"+\" | \"-\",\n              unaryExpression(\"+\", arg.node),\n              numericLiteral(1),\n            ),\n          ),\n        );\n      } else {\n        const old = path.scope.generateUidIdentifierBasedOnNode(\n          arg.node,\n          \"old\",\n        );\n        const varName = old.name;\n        path.scope.push({ id: old });\n\n        const binary = binaryExpression(\n          path.node.operator[0] as \"+\" | \"-\",\n          identifier(varName),\n          // todo: support bigint\n          numericLiteral(1),\n        );\n\n        // i++ => (_old = (+i), i = _old + 1, _old)\n        path.replaceWith(\n          sequenceExpression([\n            assignmentExpression(\n              \"=\",\n              identifier(varName),\n              unaryExpression(\"+\", arg.node),\n            ),\n            assignmentExpression(\"=\", cloneNode(arg.node), binary),\n            identifier(varName),\n          ]),\n        );\n      }\n    },\n  },\n\n  AssignmentExpression: {\n    exit(path) {\n      const { scope, seen, bindingNames } = this;\n\n      if (path.node.operator === \"=\") return;\n\n      if (seen.has(path.node)) return;\n      seen.add(path.node);\n\n      const left = path.get(\"left\");\n      if (!left.isIdentifier()) return;\n\n      // Simple update-assign foo += 1;\n      // =>   exports.foo =  (foo += 1);\n      const localName = left.node.name;\n\n      if (!bindingNames.has(localName)) return;\n\n      // redeclared in this scope\n      if (scope.getBinding(localName) !== path.scope.getBinding(localName)) {\n        return;\n      }\n\n      const operator = path.node.operator.slice(0, -1);\n      if (LOGICAL_OPERATORS.includes(operator)) {\n        // &&, ||, ??\n        // (foo &&= bar) => (foo && foo = bar)\n        path.replaceWith(\n          logicalExpression(\n            // @ts-expect-error Guarded by LOGICAL_OPERATORS.includes\n            operator,\n            path.node.left,\n            assignmentExpression(\n              \"=\",\n              cloneNode(path.node.left),\n              path.node.right,\n            ),\n          ),\n        );\n      } else {\n        // (foo += bar) => (foo = foo + bar)\n        path.node.right = binaryExpression(\n          // @ts-expect-error An assignment expression operator removing \"=\" must\n          // be a valid binary operator\n          operator,\n          cloneNode(path.node.left),\n          path.node.right,\n        );\n        path.node.operator = \"=\";\n      }\n    },\n  },\n};\n"],"mappings":"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"}