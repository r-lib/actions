name: 'setup-r-dependencies'
description: 'Action to setup installation tools and install R dependencies'
author: 'Jim Hester'
inputs:
  cache:
    description: 'A boolean value indicating whether packages should be cached from one to the other'
    required: true
    default: true
  cache-version:
    description: 'The version of the cache, change this from the default (1) to start over with a fresh cache. Ignored if cache: false'
    required: true
    default: 1
  extra-packages:
    description: 'Any extra packages to install outside of the packages listed in the dependencies'
  needs:
    description: 'Any extra Config/Needs fields which need to be included when installing dependencies'
  packages:
    description: 'Which package(s) to install.'
    default: 'deps::., any::sessioninfo'
  pak-version:
    description: 'Which pak version to use. Possible values are "stable", "rc" and "devel".'
    default: 'stable'
  working-directory:
    description: 'Using the working-directory keyword, you can specify the working directory of where "pkg_deps" command searches for dependencies in the "DESCRIPTION" file.'
    default: '.'
  dependencies:
    description: 'Types of dependencies to install. Must be an R expression. Note that it often needs to be quoted in YAML, see the README for details.'
    default: '"all"'
runs:
  using: "composite"
  steps:
      - name: Set site library path
        run: |
          # Set site library path
          cat("::group::Set site library path\n")
          lib <- Sys.getenv("R_LIBS_SITE")
          if (lib == "") {
            lib <- file.path(dirname(.Library), "site-library")
            cat(sprintf("R_LIBS_SITE=%s\n", lib), file = Sys.getenv("GITHUB_ENV"), append = TRUE)
            message("Setting R_LIBS_SITE to ", lib)
          } else {
            message("R_LIBS_SITE is already set to ", lib)
          }
          cat("::endgroup::\n")
        shell: Rscript {0}

      - name: Install pak (Windows)
        if: runner.os == 'Windows'
        run: |
          # Install pak
          cat("::group::Install pak\n")
          dir.create(Sys.getenv("R_LIBS_SITE"), showWarnings = FALSE, recursive = TRUE)
          install.packages("pak", repos = "https://r-lib.github.io/p/pak/${{ inputs.pak-version }}/", lib = Sys.getenv("R_LIBS_SITE"))
          cat("::endgroup::\n")
        shell: Rscript {0}

      - name: Install pak (Unix)
        if: runner.os != 'Windows'
        run: |
          # Install pak
          echo "::group::Install pak"
          sudo -E R -q -e 'dir.create(Sys.getenv("R_LIBS_SITE"), recursive = TRUE, showWarnings = FALSE)'
          sudo -E R -q -e 'install.packages("pak", repos = "https://r-lib.github.io/p/pak/${{ inputs.pak-version }}/", lib = Sys.getenv("R_LIBS_SITE"))'
          echo "::endgroup::"
        shell: bash

      - name: Query dependencies
        id: install
        run: |
          # Query dependencies
          cat("::group::Dependency resolution\n")
          cat("os-version=", sessionInfo()$running, "\n", file = Sys.getenv("GITHUB_OUTPUT"), sep = "", append = TRUE)
          cat("r-version=", if (grepl("development", rv <- R.Version()$version.string)) as.character(getRversion()) else rv, "\n", file = Sys.getenv("GITHUB_OUTPUT"), sep = "", append = TRUE)
          needs <- sprintf("Config/Needs/%s", strsplit("${{ inputs.needs }}", "[[:space:],]+")[[1]])
          deps <- strsplit("${{ inputs.packages }}", "[[:space:],]+")[[1]]
          extra_deps <- strsplit("${{ inputs.extra-packages }}", "[[:space:],]+")[[1]]
          dir.create(".github", showWarnings=FALSE)
          Sys.setenv("PKGCACHE_HTTP_VERSION" = "2")
          pak::lockfile_create(
            c(deps, extra_deps),
            lockfile = ".github/pkg.lock",
            dependencies = c(needs, (${{ inputs.dependencies }}))
          )
          cat("::endgroup::\n")
          cat("::group::Show Lockfile\n")
          writeLines(readLines(".github/pkg.lock"))
          cat("::endgroup::\n")
        shell: Rscript {0}
        working-directory: ${{ inputs.working-directory }}

      - name: Restore R package cache
        if: inputs.cache == 'true'
        uses: actions/cache@v3
        with:
          path: |
            ${{ env.R_LIBS_USER }}/*
            !${{ env.R_LIBS_USER }}/pak
          key: ${{ format('{0}-{1}-{2}-{3}', steps.install.outputs.os-version, steps.install.outputs.r-version, inputs.cache-version, hashFiles(format('{0}/.github/pkg.lock', inputs.working-directory ))) }}
          restore-keys: ${{ steps.install.outputs.os-version }}-${{ steps.install.outputs.r-version }}-${{inputs.cache-version }}-

      - name: Install dependencies
        run: |
          ## Install/Update packages
          cat("::group::Installing/updating packages\n")
          Sys.setenv("PKGCACHE_HTTP_VERSION" = "2")
          pak::lockfile_install(".github/pkg.lock")
          cat("::endgroup::\n")
          cat("::group::Session info\n")
          if (requireNamespace("sessioninfo", quietly = TRUE)) {
            if (packageVersion("sessioninfo") >= "1.2.1") {
              sessioninfo::session_info(pkgs = "installed", include_base = TRUE)
            } else {
              options(width = 200)
              sessioninfo::session_info(rownames(installed.packages()), include_base=TRUE)
            }
          } else {
            sessionInfo()
          }
          ## Clean up lock file
          unlink(".github/pkg.lock")
          cat("::endgroup::\n")
        shell: Rscript {0}
        working-directory: ${{ inputs.working-directory }}

      - name: Don't use tar 1.30 from Rtools35 to store the cache
        if: runner.os == 'Windows'
        shell: bash
        run: |
          if command -v /c/Rtools/bin/tar && /c/Rtools/bin/tar --version | grep -q 'tar (GNU tar) 1.30'
            then echo 'C:/Program Files/Git/usr/bin' >> $GITHUB_PATH
          fi
